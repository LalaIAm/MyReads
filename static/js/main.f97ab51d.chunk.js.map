{"version":3,"sources":["utils/BookAPI.js","components/BookDetails/BookDetails.js","components/BookDropdown/BookDropdown.js","components/BookCard/BookCard.js","components/BookList/BookList.js","components/Main/Main.js","components/SearchForm/SearchForm.js","components/Search/Search.js","App.js","serviceWorker.js","components/SideBar/SideBar.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","BookDetails","book","Modal","trigger","Button","primary","Header","title","Content","Image","wrapped","floated","size","src","imageLinks","thumbnail","Description","as","subtitle","publishedDate","pageCount","description","BookDropdown","props","handleChange","event","setState","value","target","handleSubmit","preventDefault","changeShelves","state","onSubmit","this","className","onChange","secondary","type","Component","BookCard","onShelfChange","e","switchShelves","shelf","icon","authors","Array","isArray","Card","smallThumbnail","Meta","Icon","circular","name","color","extra","BookList","from","Container","textAlign","Group","itemsPerRow","map","index","key","id","React","Main","getPastReads","filter","getCurrentReads","getFutureReads","Grid","padded","columns","divided","Row","Column","booksInRow","SearchForm","query","handleQueryChange","updateQuery","Form","Input","placeholder","Search","App","handleShelfChange","method","body","JSON","stringify","API","foundBooks","path","exact","render","Boolean","window","location","hostname","match","SideBar","children","segmentRef","useRef","useState","visible","setVisible","Sidebar","Pushable","Segment","raised","Menu","animation","inverted","onHide","width","to","Ref","innerRef","onClick","Sentry","dsn","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f97ab51d.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token)\r\n  token = localStorage.token = Math.random()\r\n    .toString(36)\r\n    .substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = bookId =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then(res => res.json());\r\n\r\nexport const search = query =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query }),\r\n  })\r\n    .then(res => res.json())\r\n    .then(data => data.books);\r\n","import React from \"react\";\r\nimport { Modal, Button, Image, Header } from \"semantic-ui-react\";\r\n\r\nconst BookDetails = ({ book }) => {\r\n  return (\r\n    <Modal trigger={<Button primary>Book Details</Button>}>\r\n      <Modal.Header>{book.title}</Modal.Header>\r\n      <Modal.Content>\r\n        <Image\r\n          wrapped\r\n          floated='right'\r\n          size='medium'\r\n          src={book.imageLinks.thumbnail}\r\n        />\r\n        <Modal.Description>\r\n          <Header as='h3'>{book.title}</Header>\r\n          <Header as='h4'>{book.subtitle}</Header>\r\n          <p>\r\n            {book.publishedDate} {book.pageCount} pages\r\n          </p>\r\n          <p>{book.description}</p>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BookDetails;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nexport default class BookDropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n    };\r\n  }\r\n  handleChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.changeShelves(this.state.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <select\r\n          className='dropdown'\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        >\r\n          <option value=''>Shelf</option>\r\n          <option value='read'>Past Read</option>\r\n          <option value='currentlyReading'>Current Read</option>\r\n          <option value='wantToRead'>Future Read</option>\r\n        </select>\r\n        <Button secondary className='btn' type='submit'>\r\n          Switch Shelves\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Card, Image, Icon } from \"semantic-ui-react\";\r\nimport BookDetails from \"../BookDetails/BookDetails\";\r\nimport BookDropdown from \"../BookDropdown/BookDropdown\";\r\n\r\nexport default class BookCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  onShelfChange = (e, { value }) => {\r\n    this.setState({ value });\r\n    this.switchShelves();\r\n  };\r\n\r\n  switchShelves = shelf => {\r\n    this.props.changeShelves(this.props.book, shelf);\r\n  };\r\n\r\n  render() {\r\n    const { book, icon } = this.props;\r\n    let authors = book.authors;\r\n    if (Array.isArray(authors)) {\r\n      authors = authors.toString();\r\n    }\r\n\r\n    return (\r\n      <Card>\r\n        <Card.Content>\r\n          {book && book.imageLinks.smallThumbnail && (\r\n            <Image\r\n              src={book.imageLinks.smallThumbnail || \"\"}\r\n              wrapped\r\n              floated='right'\r\n              size='mini'\r\n            />\r\n          )}\r\n          <Card.Header>{book.title}</Card.Header>\r\n          <Card.Meta>{book.subtitle}</Card.Meta>\r\n          <Card.Description>\r\n            <p>\r\n              <span>\r\n                {\" \"}\r\n                <Icon circular name={icon} color='teal' />{\" \"}\r\n              </span>{\" \"}\r\n              by {authors}\r\n            </p>\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <div className='card-action'>\r\n            <BookDetails book={book} />\r\n            <BookDropdown changeShelves={this.switchShelves} />\r\n          </div>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Container, Header, Card } from \"semantic-ui-react\";\r\nimport BookCard from \"../BookCard/BookCard\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BookList extends React.Component {\r\n  render() {\r\n    const { changeShelves, shelf } = this.props;\r\n\r\n    if (!this.props.books) {\r\n      return <p>Search books to find new reads</p>;\r\n    }\r\n\r\n    const books = Array.from(this.props.books);\r\n    return (\r\n      <Container>\r\n        <Header as='h3' textAlign='center'>\r\n          {shelf}\r\n        </Header>\r\n        <Container>\r\n          <Card.Group itemsPerRow={1}>\r\n            {books.map((book, index) => {\r\n              return (\r\n                <BookCard\r\n                  icon={this.props.icon || \"check\"}\r\n                  book={book}\r\n                  key={book.id}\r\n                  changeShelves={changeShelves}\r\n                />\r\n              );\r\n            })}\r\n          </Card.Group>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nBookList.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n  changeShelves: PropTypes.func.isRequired,\r\n  shelf: PropTypes.string,\r\n};\r\n\r\nexport default BookList;\r\n","import React, { Component } from \"react\";\r\nimport BookList from \"../BookList/BookList\";\r\nimport { Header, Grid } from \"semantic-ui-react\";\r\n\r\nexport default class Main extends Component {\r\n  getPastReads = () => {\r\n    return this.props.books.filter(book => {\r\n      return book.shelf === \"read\";\r\n    });\r\n  };\r\n\r\n  getCurrentReads = () => {\r\n    return this.props.books.filter(book => {\r\n      return book.shelf === \"currentlyReading\";\r\n    });\r\n  };\r\n\r\n  getFutureReads = () => {\r\n    return this.props.books.filter(book => {\r\n      return book.shelf === \"wantToRead\";\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='page'>\r\n        <Header as='h2' textAlign='center'>\r\n          MyShelves\r\n        </Header>\r\n        <Grid padded columns={3} divided>\r\n          <Grid.Row>\r\n            <Grid.Column>\r\n              <BookList\r\n                changeShelves={this.props.changeShelves}\r\n                books={this.getFutureReads()}\r\n                shelf={\"Future Reads\"}\r\n                booksInRow={3}\r\n                icon={\"calendar check outline\"}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <BookList\r\n                changeShelves={this.props.changeShelves}\r\n                books={this.getCurrentReads()}\r\n                shelf={\"Current Reads\"}\r\n                booksInRow={3}\r\n                icon='book'\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <BookList\r\n                changeShelves={this.props.changeShelves}\r\n                books={this.getPastReads()}\r\n                shelf={\"Past Reads\"}\r\n                booksInRow={3}\r\n                icon={\"paper plane outline\"}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\n\r\nexport default class SearchForm extends Component {\r\n  state = {\r\n    query: \"\",\r\n  };\r\n\r\n  handleQueryChange = event => {\r\n    this.setState({ query: event.target.value });\r\n    this.props.updateQuery(this.state.query);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='form'>\r\n        <Form>\r\n          <Form.Input\r\n            type='text'\r\n            onChange={this.handleQueryChange}\r\n            placeholder='Search...'\r\n            className='search-books'\r\n            value={this.state.query}\r\n          />\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport BookList from \"../BookList/BookList\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\n\r\nexport default class Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className='page'>\r\n        <Header as='h2' textAlign='center'>\r\n          Search\r\n        </Header>\r\n        <SearchForm\r\n          query={this.props.query}\r\n          updateQuery={this.props.updateQuery}\r\n        />\r\n        <BookList\r\n          books={this.props.books}\r\n          booksInRow={6}\r\n          changeShelves={this.props.changeShelves}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as API from \"./utils/BookAPI\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Main from \"./components/Main/Main\";\r\nimport Search from \"./components/Search/Search\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      books: [],\r\n      query: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getAll().then(data => {\r\n      this.setState({ books: data });\r\n    });\r\n  }\r\n\r\n  handleShelfChange = (book, shelf) => {\r\n    API.update(book, shelf);\r\n    API.getAll().then(data => {\r\n      this.setState({ books: data });\r\n    });\r\n  };\r\n\r\n  updateQuery = query => {\r\n    this.setState(() => ({\r\n      query: query,\r\n    }));\r\n    API.search(this.state.query).then(data => {\r\n      this.setState({\r\n        foundBooks: data,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route\r\n          path='/'\r\n          exact\r\n          render={() => (\r\n            <Main\r\n              books={this.state.books}\r\n              changeShelves={this.handleShelfChange}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path='/search'\r\n          render={() => (\r\n            <Search\r\n              books={this.state.foundBooks}\r\n              changeShelves={this.handleShelfChange}\r\n              updateQuery={this.updateQuery}\r\n              query={this.state.query}\r\n            />\r\n          )}\r\n        />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Menu, Ref, Segment, Sidebar, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SideBar = ({ children }) => {\r\n  const segmentRef = useRef();\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const openMenu = event => {\r\n    setVisible(true);\r\n  };\r\n\r\n  return (\r\n    <Sidebar.Pushable as={Segment.Group} raised>\r\n      <Sidebar\r\n        as={Menu}\r\n        animation='overlay'\r\n        icon='labeled'\r\n        inverted\r\n        onHide={() => setVisible(false)}\r\n        target={segmentRef}\r\n        visible={visible}\r\n        width='wide'\r\n      >\r\n        <div className='sidebar-menu'>\r\n          <h2>MyReads</h2>\r\n          <ul className='sidebar-list'>\r\n            <li className='sidebar-item'>\r\n              <Link to='/'>\r\n                <p className='menu-link'>My Shelves</p>\r\n              </Link>\r\n            </li>\r\n            <li className='sidebar-item'>\r\n              <Link to='/search'>\r\n                <p className='menu-link'>Search Books</p>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </Sidebar>\r\n\r\n      <Ref innerRef={segmentRef}>\r\n        <Segment>\r\n          <div className='header'>\r\n            <Button onClick={openMenu}>Menu</Button>\r\n            <h1>MyReads</h1>\r\n          </div>\r\n          {children}\r\n        </Segment>\r\n      </Ref>\r\n    </Sidebar.Pushable>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"semantic-ui-less/semantic.less\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport SideBar from \"./components/SideBar/SideBar\";\r\nimport * as Sentry from \"@sentry/browser\";\r\n\r\nSentry.init({\r\n  dsn: \"https://41be231c64f24c01a1a944812499526d@sentry.io/5184466\",\r\n});\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <SideBar>\r\n      <App />\r\n    </SideBar>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}